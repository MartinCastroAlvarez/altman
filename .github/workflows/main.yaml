name: "Altman Pipeline"
on: "pull_request"

jobs:

  # ----------------------------------------------------
  # Flake8
  # ----------------------------------------------------
  flake8:
    name: "Flake8"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'
      - name: 'Test Set up Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Cache pip'
        uses: 'actions/cache@v2'
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: 'Install dependencies'
        run: |
          'pip install --upgrade pip'
          'python -m venv venv'
          'source venv/bin/activate'
          'if [ -f requirements.txt ]; then pip install -r requirements.txt; fi'
      - name: 'Lint'
        env:
          TERM: 'xterm-256color'
        run: |
          source venv/bin/activate
          ./bin/flake8.sh

  # ----------------------------------------------------
  # Black
  # ----------------------------------------------------
  black:
    name: "Black"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'
      - name: 'Test Set up Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Cache pip'
        uses: 'actions/cache@v2'
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: 'Install dependencies'
        run: |
          'pip install --upgrade pip'
          'python -m venv venv'
          'source venv/bin/activate'
          'if [ -f requirements.txt ]; then pip install -r requirements.txt; fi'
      - name: 'Lint'
        env:
          TERM: 'xterm-256color'
        run: |
          source venv/bin/activate
          ./bin/black.sh

  # ----------------------------------------------------
  # iSort
  # ----------------------------------------------------
  isort:
    name: "iSort"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'
      - name: 'Test Set up Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Cache pip'
        uses: 'actions/cache@v2'
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: 'Install dependencies'
        run: |
          'pip install --upgrade pip'
          'python -m venv venv'
          'source venv/bin/activate'
          'if [ -f requirements.txt ]; then pip install -r requirements.txt; fi'
      - name: 'Lint'
        env:
          TERM: 'xterm-256color'
        run: |
          source venv/bin/activate
          ./bin/isort.sh

  # ----------------------------------------------------
  # PyLint
  # ----------------------------------------------------
  pylint:
    name: "PyLint"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'
      - name: 'Test Set up Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Cache pip'
        uses: 'actions/cache@v2'
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: 'Install dependencies'
        run: |
          'pip install --upgrade pip'
          'python -m venv venv'
          'source venv/bin/activate'
          'if [ -f requirements.txt ]; then pip install -r requirements.txt; fi'
      - name: 'Lint'
        env:
          TERM: 'xterm-256color'
        run: |
          source venv/bin/activate
          ./bin/lint.sh

  # ----------------------------------------------------
  # MyPy
  # ----------------------------------------------------
  pylint:
    name: "MyPy"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'
      - name: 'Test Set up Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Cache pip'
        uses: 'actions/cache@v2'
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: 'Install dependencies'
        run: |
          'pip install --upgrade pip'
          'python -m venv venv'
          'source venv/bin/activate'
          'if [ -f requirements.txt ]; then pip install -r requirements.txt; fi'
      - name: 'Lint'
        env:
          TERM: 'xterm-256color'
        run: |
          source venv/bin/activate
          ./bin/mypy.sh

  # ----------------------------------------------------
  # Unit Tests
  # ----------------------------------------------------
  test:
    name: "Unit Tests"
    runs-on: "ubuntu-latest"
    needs:
      - "flake8"
      - "lint"
      - "mypy"
      - "isort"
      - "black"
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'
      - name: 'Test Set up Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Cache pip'
        uses: 'actions/cache@v2'
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: 'Install dependencies'
        run: |
          'pip install --upgrade pip'
          'python -m venv venv'
          'source venv/bin/activate'
          'if [ -f requirements.txt ]; then pip install -r requirements.txt; fi'
      - name: 'Pytest'
        env:
          TERM: 'xterm-256color'
        run: |
          source venv/bin/activate
          ./bin/test.sh
